
        { //* === Explicaci√≥n ===
            // A veces, cuando se trabaja con arreglos, es muy √∫til poder iterar a trav√©s de cada elemento para encontrar uno o m√°s elementos que podamos necesitar, o manipular un arreglo en funci√≥n de los elementos de datos que cumplen un determinado conjunto de criterios. JavaScript ofrece varios m√©todos incorporados que iteran sobre arreglos de formas ligeramente diferentes para conseguir distintos resultados (como every(), forEach(), map(), etc.), sin embargo, la t√©cnica que es m√°s flexible y nos ofrece la mayor cantidad de control es un simple bucle for.

            function greaterThanTen(arr) {
                let newArr = [];
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i] > 10) {
                        newArr.push(arr[i]);
                    }
                }
                return newArr;
            }

            let resultado = greaterThanTen([2, 12, 8, 14, 80, 0, 1]);
            console.log(resultado);
            // Usando un bucle for, esta funci√≥n itera y accede a cada elemento del arreglo, y lo somete a una simple prueba que hemos creado. De esta manera, hemos determinado de forma sencilla y program√°tica qu√© elementos de datos son mayores que 10, y hemos devuelto un nuevo arreglo, [12, 14, 80], que contiene esos elementos.
        }

        {
            // === Desafio === 

            // Hemos definido una funci√≥n, filteredArray, que toma arr, un arreglo anidado, y elem como argumentos, y devuelve un nuevo arreglo. elem representa un elemento que puede o no estar presente en uno o m√°s de los arreglos anidados dentro de arr. 

            /*üëâModifica la funci√≥n, usando un bucle for, para que devuelva una versi√≥n filtrada del arreglo pasado de forma que cualquier arreglo anidado dentro de arr que contenga elem haya sido eliminado.üëà*/

            //Se fordebe utilizar un bucle para buscar en todos los elementos de la matriz.

            // Cada elemento de la matriz debe compararse con el par√°metro elem  pasado a trav√©s de la funci√≥n filteredArray()

            // Si NO se encuentra una coincidencia, newArr agregue ese subarreglo completo. La funci√≥n push() es muy √∫til aqu√≠.

            // Una vez que se agrega todo el subarreglo al newArrciclo, contin√∫e con el siguiente elemento.


            function filteredArray(arr, elem) {
                let newArr = [];
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i].indexOf(elem) == -1) {
                        newArr.push(arr[i])
                    }
                }
                // Cambia solo el c√≥digo encima de esta l√≠nea
                return newArr;
            }



            let resultado = filteredArray([["amy", "sean", "sam"], ["peter", "sean", "sam"]], "peter");
            console.log(resultado);


        }