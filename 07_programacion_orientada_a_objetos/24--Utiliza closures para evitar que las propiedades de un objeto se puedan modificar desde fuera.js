
{
    // En el desaf√≠o anterior, bird ten√≠a una propiedad p√∫blica name. Se considera p√∫blica porque se puede acceder y cambiar fuera de la definici√≥n de bird.
    /*üëâ bird.name = "Duffy";üëà*/

    // Por lo tanto, cualquier parte de tu c√≥digo puede cambiar f√°cilmente el nombre "name" de bird a cualquier valor. Piensa en cosas como contrase√±as y cuentas bancarias que se pueden cambiar f√°cilmente por cualquier parte de tu base de c√≥digo. Eso podr√≠a crear muchos problemas.

    // La forma m√°s sencilla de hacer privada esta propiedad p√∫blica es creando una variable dentro de la funci√≥n constructora. Esto cambia el alcance de esa variable para que est√© dentro de la funci√≥n constructora versus disponible globalmente. De este modo, la variable solo puede ser accesible y cambiable por m√©todos que tambi√©n est√©n dentro de la funci√≥n constructora.
    let bird = {
        name: "Donald",
        numLegs: 'Tengo 2 patas'
    };


    let glideMixin = function (obj) {
        obj.glide = function () {
            console.log(' y planeo');
        };

    };

    glideMixin(bird);

    console.log("--------------------");
    console.log(bird.name);
    console.log(bird.numLegs);
    bird.glide();

    bird.name = "Duffy";
    console.log(bird.name);

    function Bird() {
        let huevosEplocionados = 10;
        console.log(this)
        this.tenerNumeroHuevoIncubados = function () {
            console.log(huevosEplocionados);
        };
        console.log(this.tenerNumeroHuevoIncubados)
    }
    let ducky = new Bird();
    ducky.tenerNumeroHuevoIncubados();


    // Aqu√≠ tenerNumeroHuevoIncubados() es un m√©todo privilegiado, porque tiene acceso a la variable privada huevosEplocionados. Esto es posible porque huevosEplocionados est√° declarada en el mismo contexto que tenerNumeroHuevoIncubados(). En JavaScript, una funci√≥n siempre tiene acceso al contexto en el que se cre√≥. A esto se le llama closure.

}

{
    //! === Desafio === 

    // Cambia como weight es declarada en la funci√≥n Bird para que sea una variable privada. Despu√©s, crea un m√©todo getWeight que devuelva el valor 15 para weight.

    function Bird() {
        this.weight = 15;
      
      }
}
{
    //! === Solucion ===

    // Cambia como weight es declarada en la funci√≥n Bird para que sea una variable privada. Despu√©s, crea un m√©todo getWeight que devuelva el valor 15 para weight.
    
    function Bird() {
        let weight = 15;
      
        this.getWeight = function () {
          return weight
        }
      
      }
      let loro = new Bird();
      
      console.log(loro.getWeight())
      
}









//! === PRACTICAS ===


const repetir = 0;
{
    const padre = () => {

        let actividad = 'pasiar'; //!   ==>  Ejemplo de (scope) l√©xico

        let contador = repetir;
        console.log(`Quieres Ir a ${actividad} `);

        const Hija = () => {
            console.log(contador += 1);
            console.log(`si papa quiero ir a ${actividad} `);  //!  ==>  Ejemplo de (scope) l√©xico
        };

        return Hija; //? Retorna la funcion no  su ejecuci√≥n

    };

    //* (scope) l√©xico
    //? El √°mbito l√©xico es una parte importante de las cl√°usulas, pero no es una cl√°usula en s√≠ mismo.

    //? El √°mbito l√©xico describe c√≥mo las funciones anidadas [const Hija = () =>{}]  (tambi√©n conocidas como "secundarias") tienen acceso a las variables definidas en los √°mbitos de sus padres.

    //* closure (Clausera)
    // ? Una cl√°usula es una funci√≥n que tiene acceso al ambito de su funci√≥n padre, incluso despu√©s de que la funci√≥n padre haya terminado de ejecutar.

    //? La cl√°usula que creamos, ahora nos permite continuar aumentando el valor de la variable contador  cada vez que ejecutamos resultado().

    const resultado = padre();
    console.log(resultado);
    resultado();
    resultado();


}
