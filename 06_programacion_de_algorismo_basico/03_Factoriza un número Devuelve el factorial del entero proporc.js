{

    //  === Explicacion ===

    // Devuelve el factorial del entero proporcionado.

    // Si el n√∫mero entero es representado con la letra n, un factorial es el producto de todos los enteros positivos menores o iguales a n.

    // Los factoriales suelen representarse con la abreviatura n!

    // Por ejemplo: 5! = 1 * 2 * 3 * 4 * 5 = 120

    // S√≥lo se proporcionar√°n a la funci√≥n los enteros mayores o iguales a cero.




}




{
    // Pista 1
    // Sabes que tu soluci√≥n deber√≠a regresar 1cuando el n√∫mero pasado a la funci√≥n sea 0o 1. Adem√°s, el valor final devuelto ser√° el producto de todos los n√∫meros entre 1 y el n√∫mero (inclusive). Si inicializa el valor del producto a 1, entonces piense c√≥mo podr√≠a comenzar en el n√∫mero dado y continuar disminuyendo este n√∫mero hasta un valor espec√≠fico mientras multiplica el producto por el n√∫mero en cada paso.

    // Soluci√≥n recursiva

    // Este comienza f√°cilmente desde 0! = 1, por lo que puede continuar y simplemente return 1all√≠.

    // Podemos usar eso ifpara romper el ciclo que vamos a crear usando una funci√≥n recursiva . Verificar√° si el n√∫mero que le diste a la funci√≥n es 0 (que ser√≠a el final de tu cadena factorial). Las funciones "terminan" cuando devuelven algo. De hecho, todas las funciones sin una declaraci√≥n expl√≠cita returndevolver√°n undefined.

    // Esta es tambi√©n la raz√≥n por la que en lugar de haber "terminado" , siempre se dice que una funci√≥n "ha regresado" . Y ahora esto‚Ä¶

    // Entendiendo la recursividad

    // La recursividad se refiere a una funci√≥n que se repite (llama) a s√≠ misma. En este caso, b√°sicamente devolvemos el n√∫mero dado (es decir, 5), multiplicado por la funci√≥n misma, pero esta vez el valor pasado al par√°metro numnum-1 es (que inicialmente se traduce en 4). La misma funci√≥n se va a ejecutar dentro de s√≠ misma interesante, ¬øeh?

    // Entendiendo el flujo

    // El primer valor devuelto se puede visualizar mejor si piensas en esas operaciones de par√©ntesis que hiciste en la escuela secundaria donde haces los c√°lculos dentro de cada par√©ntesis de adentro hacia afuera, corchete y corchete hasta obtener un resultado final (un total). Esta vez es lo mismo, mira el flujo del programa:

    // Durante la primera ejecuci√≥n de la funci√≥n:

    // [ n√∫mero = 5]

    // ¬ø5 es igual a 1 o a 0? No ‚Äî> Oki doki, continuemos‚Ä¶

    // Devoluciones:

    // ( 5 _( segunda ejecuci√≥n : 4 _( tercera ejecuci√≥n : 3 _( cuarta ejecuci√≥n : 2 _ quinta ejecuci√≥n : 1 ))))

    // Lo que devuelve se puede ver como (5*(4*(3*(2*1))))o simplemente 5 * 4 * 3 * 2 * 1, y la funci√≥n devolver√° el resultado de esa operaci√≥n: 120. Ahora, veamos qu√© hacen el resto de las ejecuciones:

    // Durante el resto de las ejecuciones :

    // Segunda ejecuci√≥n : num = 5-1 = 4 ‚Üí ¬øes num 0 o 1? No

    // ‚Üí devuelve la multiplicaci√≥n entre 4 y el siguiente resultado cuando num ahora es 4-1.

    // Tercera Ejecuci√≥n : num = 4 - 1 = 3 ‚Üí es num 0 o 1? No

    // ‚Üí devuelve la multiplicaci√≥n entre 3 y el siguiente resultado cuando num ahora es 3-1.

    // Cuarta Ejecuci√≥n : num = 3-1 = 2 ‚Üí ¬øes num 0 o 1? No

    // ‚Üí devuelve la multiplicaci√≥n entre 2 y el siguiente resultado cuando num ahora es 2-1.

    // Quinta Ejecuci√≥n : num = 2-1 = 1 ‚Üí es num 0 o 1? s√≠

    // ‚Üí volver 1 . Y aqu√≠ es donde se detiene la recursividad porque no hay m√°s ejecuciones.

}

{


    {
        // === desafio ===
/*üëâ
        function factorialize(num) {
            return num;
        }üëà*/
    }


    // === Solucion1 ===
/*üëâ    {
        function factorialize(num) {
            let product = 1;
            for (let i = 1; i <= num; i++) {

                // console.log(`Valor del contador i ==> ${i}`);

                // console.log(` Valor de( product = product * i) ==> ${product = product * i}`);
                // console.log("");
                //  product *= i;
            }
            return product;
        }

        factorialize(5);
    }üëà*/

    // C√≥digo Explicaci√≥n
    // Dado que los valores de retorno de la funci√≥n siempre ser√°n mayores o iguales a 1, productse inicializa en uno. Para el caso en que el n√∫mero sea 0, la condici√≥n del bucle for ser√° falsa, pero dado productque se inicializa como 1, tendr√° el valor correcto cuando returnse ejecute la declaraci√≥n.

    // Para todos los n√∫meros pasados ‚Äã‚Äãa la funci√≥n que son mayores que uno, el forciclo simple incrementar√° ien uno cada iteraci√≥n y volver√° a calcular producthasta el valor num.
}


{
    /*üëâ(usando recursividad)üëà*/
debugger;
    function factorialize(num) {
        if (num === 0) {
            return 1;
        }
        return/*üëâ num * üëà*/factorialize(num - 1); // ==> 5*4*3*2*1== 120
    }

    factorialize(5);

    // Lo que devuelve se puede ver comoüëà ==*  5  * (4 * (3 * (2 * 1)))
    //    /*üëâ o simplementeüëà*/(5 * 4 * 3 * 2 * 1)



    /*üëâ    function factorialize(num) {
            if (num === 0) {
                console.log("def If  ");
                console.log(" ");
                return 1;
            }
            // console.log(num);
            let resultadofactorialize = factorialize(num - 1);
            console.log(resultadofactorialize);
            let resultado = num * factorialize(num - 1);
            // console.log(resultado);
            return resultado;
        }
    
        console.log(factorialize(5));üëà*/


    // C√≥digo Explicaci√≥n
    // Observe que en la primera l√≠nea tenemos la condici√≥n terminal, es decir, una condici√≥n para comprobar el final de la recursividad. Si num == 0, devolvemos 1, es decir, terminamos efectivamente la recursividad e informamos a la pila para que propague este valor a los niveles superiores. Si no tenemos esta condici√≥n, la recursividad continuar√° hasta que se consuma el espacio de la pila, lo que resultar√° en un desbordamiento de la pila . 1.4k.
}

{

    // Soluci√≥n 3(usando recursividad y parametro por defecto)

/*üëâ    function factorialize(num, factorial = 1) {
        if (num === 0) {
            return factorial;
        } else {
            return factorialize(num - 1, factorial * num);
        }
    }

    factorialize(5);üëà*/


    // C√≥digo Explicaci√≥n
    // En esta soluci√≥n, usamos Tail Recursion 541 para optimizar el uso de la memoria.

    // En la recursividad principal tradicional, el modelo t√≠pico es que primero realiza sus llamadas recursivas y luego toma el valor de retorno de la llamada recursiva y calcula el resultado. De esta manera, no obtiene el resultado de su c√°lculo hasta que haya regresado de cada llamada recursiva.

    // En la recursi√≥n de cola, primero realiza sus c√°lculos y luego ejecuta la llamada recursiva, pasando los resultados de su paso actual al siguiente paso recursivo. Esto da como resultado que la √∫ltima declaraci√≥n tenga la forma de (return (par√°metros de funci√≥n recursiva)).

    // En esta soluci√≥n, con cada evaluaci√≥n de la llamada recursiva, se actualiza el factorial. Esto es diferente de la soluci√≥n recursiva principal donde todos los c√°lculos de evaluaci√≥n se almacenan en la pila hasta que se alcanza el caso base.

}






{
    // Soluci√≥n 4 (haga clic para mostrar/ocultar)
/*üëâ    function factorialize(num) {
        return num < 0 ? 1 :
            new Array(num)
                .fill(undefined)
                .reduce((product, _, index) => product * (index + 1), 1);
    }
    factorialize(5);üëà*/
    // C√≥digo Explicaci√≥n
    // En esta soluci√≥n, usamos la funci√≥n "reducir" para encontrar el valor factorial del n√∫mero.
    // Hemos creado una matriz que tiene longitud num. Y llenamos todos los elementos de la matriz como undefined. En este caso, tenemos que hacer esto porque las matrices vac√≠as no se pueden reducir. Por cierto, puede llenar la matriz como desee. Esto depende completamente de su vista de ingenier√≠a.
    // En reduceel acumulador de la funci√≥n est√° llamando, producteste es tambi√©n nuestro valor final. Estamos multiplicando nuestro valor de √≠ndice con el producto para encontrar el factorialvalor.
    // Estamos configurando el valor inicial del producto en 1 porque si fuera cero, los productos siempre obtienen cero.
    // Adem√°s, el valor factorial no se puede calcular para n√∫meros negativos, en primer lugar, estamos probando esto.
}