{
    //! Ejercicio

    // /Buscadores guardianes

    // Crea una funci√≥n que recorra un arreglo arr y devuelva el primer elemento que pase un "detector de verdad". Esto significa que dado un elemento x, el "detector de verdad" es pasado si func(x) es true. Si ning√∫n elemento pasa la prueba. la funci√≥n deber√≠a devolver undefined.

    function findElement(arr, func) {
        let num = 0;
        return num;
    }

    findElement([1, 2, 3, 4], num => num % 2 === 0);
    findElement([1, 3, 5, 8, 9, 10], (num) => num % 2 === 0) //debe devolver 8.
    findElement([1, 3, 5, 9], (num) => num % 2 === 0) // debe devolver undefined.
}
{
    //! Solucion 1 Imperativa ciclo for in (){}

    // /Buscadores guardianes

    // Crea una funci√≥n que recorra un arreglo arr y devuelva el primer elemento que pase un "detector de verdad". Esto significa que dado un elemento x, el "detector de verdad" es pasado si func(x) es true. Si ning√∫n elemento pasa la prueba. la funci√≥n deber√≠a devolver undefined.

    function findElement(arr, func) {
        let num;
        for (let i = 0; i < arr.length; i++) {
            if (func(arr[i])) {
                return num = arr[i]
            } undefined;

        }
        return num
    }

    console.log(findElement([1, 3, 5, 8, 9, 10], (num) => num % 2 === 0));
    console.log(findElement([1, 3, 5, 9], (num) => num % 2 === 0));
}


{
    //! Solucion 2 map()
    function findElement(arr, func) {

        let num = arr[arr.map(func).indexOf(true)]
        return num

    }
    console.log(findElement([1, 3, 5, 8, 9, 10], (num) => num % 2 === 0));

    // Mire a trav√©s de la matriz dada en el primer par√°metro "arr" usando el m√©todo .map() Use la funci√≥n en el segundo par√°metro como la funci√≥n de devoluci√≥n de llamada en arr.map() Adquiera el √≠ndice del primer n√∫mero que cumple la condici√≥n en la funci√≥n . Utilice ese √≠ndice para mostrar el primer n√∫mero disponible que cumpla la condici√≥n.
}
{

    //! Solucion 2 metod find()

    function findElement(arr, func) {
        let num = arr;
        return num.find(func)//
    }
    console.log(findElement([1, 3, 5, 8, 9, 10], (num) => num % 2 === 0));




    /*üëâ  
      // Arrow function
find((element) => { ‚û° ... ‚¨Ö } )
find((element, index) => { ‚û° ... ‚¨Ö } )
find((element, index, array) => { ‚û° ... ‚¨Ö } )

// Callback function
find(callbackFn)
find(callbackFn, thisArg)

// Inline callback function
find(function(element) { ‚û° ... ‚¨Ö })
find(function(element, index) { ‚û° ... ‚¨Ö })
find(function(element, index, array){ ‚û° ... ‚¨Ö })
find(function(element, index, array) { ‚û° ... ‚¨Ö }, thisArg)üëà*/

}



{
    //! Solucion rescursiva *

    function findElement(arr, func) {
        return arr.length && !func(arr[0])
            ? findElement(arr.slice(1), func)
            : arr[0];
    }


    console.log(findElement([1, 3, 5, 8, 9, 10], (num) => num % 2 === 0));
    console.log(findElement([1, 3, 5, 9], (num) => num % 2 === 0));
}

