{

  // ! Ejercicio
  //     Cortar y rebanar
  // Tienes dos arreglos y un Ã­ndice.

  // Copia cada elemento del primer arreglo en el segundo arreglo, en orden.

  // Comienza insertando elementos en el Ã­ndice n del segundo arreglo.

  // Devuelve el arreglo resultante. Los arreglos de entrada deben permanecer iguales luego de que se ejecute la funciÃ³

  function frankenSplice(arr1, arr2, n) {
    return arr2;
  }

  frankenSplice([1, 2, 3], [4, 5, 6], 1);

}
{

  // ! Solucion

  //*     Cortar y rebanar

  // Tienes dos arreglos y un Ã­ndice.

  // Copia cada elemento del primer arreglo en el segundo arreglo, en orden.

  // Comienza insertando elementos en el Ã­ndice n del segundo arreglo.

  // Devuelve el arreglo resultante. Los arreglos de entrada deben permanecer iguales luego de que se ejecute la funciÃ³


  /// Problema ExplicaciÃ³n:

  /// Necesitamos copiar cada elemento de la primera matriz en la segunda matriz comenzando en el Ã­ndice n. TambiÃ©n tenemos que asegurarnos de que las matrices originales no estÃ©n mutadas. Es decir, no podemos realizar ningÃºn cambio en las matrices originales.

  /*ðŸ‘‰
  let localArr = arr2.slice();
      localArr.splice(n, 0, ...arr1);
      return localArr;ðŸ‘ˆ*/

  // * let newAray = arr1.concat(arr2)
  // * console.log(newAray)
  // * newAray.splice(5, 0, 6)
  // * console.log(newAray)

  function frankenSplice(arr1, arr2, n) {
    /*ðŸ‘‰  
     function frankenSplice(arr1, arr2, n) {
    let localArr = arr2.slice();
    localArr.splice(n, 0, ...arr1);
    return localArr;
  }
    ðŸ‘ˆ*/

    let newArr = arr2.slice();
    let newArr2 = [...arr1];
    console.log(newArr2)
      newArr.splice(n, 0, ...arr1)
      
      return newArr;

    // let newArr = arr2.slice();
    // newArr.splice(n, 0, ...arr1)
    // return newArr;
  }

  console.log(frankenSplice([1, 2, 3], [4, 5], 1));
  //debe devolver [4, 1, 2, 3, 5].


  // frankenSplice([1, 2, 3], [4, 5, 6], 1);

  /*ðŸ‘‰    frankenSplice([1, 2, 3], [4, 5], 1)
      //debe devolver [4, 1, 2, 3, 5].
  
      frankenSplice([1, 2], ["a", "b"], 1)
      //  debe devolver["a", 1, 2, "b"].
  
      frankenSplice(["claw", "tentacle"], ["head", "shoulders", "knees", "toes"], 2)
      // debe devolver["head", "shoulders", "claw", "tentacle", "knees", "toes"].
  
      // Todos los elementos del primer arreglo deben ser aÃ±adidos al segundo arreglo en su orden original. 
      frankenSplice([1, 2, 3, 4], [], 0) 
      // debe devolver[1, 2, 3, 4].
  ðŸ‘ˆ*/

  // El primer arreglo debe permanecer igual despuÃ©s de ejecutar la funciÃ³n.

  // El segundo arreglo debe permanecer igual despuÃ©s de ejecutar la funciÃ³n.

}
{
 /*ðŸ‘‰ function frankenSplice(arr1, arr2, n) {
    let localArray = arr2.slice();
    for (let i = 0; i < arr1.length; i++) {
      localArray.splice(n, 0, arr1[i]);
      n++;
    }
    return localArray;
  }ðŸ‘ˆ*/
}
